package testHelper;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;

/**
 * The test grid in this class has been generated with the specified generator
 * version of the app. In case the grid is recreated with the same grid
 * generating parameters as specified by this class, the result should be equal
 * to the grid itself.
 * 
 * All data in the methods below should be kept in sync with the specified
 * version of the generator.
 * 
 * As the data below was generated with hidden operators, this grid can be used
 * with visible and with hidden operator as well.
 */
public class GridCreator2x2 extends GridCreator {
	public static GridCreator2x2 create() {
		return new GridCreator2x2();
	}

	public static GridCreator2x2 createEmpty() {
		GridCreator2x2 gridCreator = new GridCreator2x2();
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	protected GridCreator2x2() {
		super();
	}

	/**
	 * This code is generated based on a grid which is generated by the app. To generate the code, use the app in Development Mode. Choose menu option Development Options -> Generate code for test helper.
	 *
	 * DO NOT REMOVE THIS TEXT.
	 */
	@Override
	protected long getGameSeed() {
		return 8439020991891041123L;
	}
	protected GridType getGridType() {
		return GridType.GRID_4x4;
	}
	protected boolean getHideOperator() {
		return false;
	}
	protected PuzzleComplexity getPuzzleComplexity() {
		return PuzzleComplexity.VERY_EASY;
	}
	protected int getGeneratorVersionNumber() {
		return 598;
	}
	protected int getMaxCageResult() {
		return 72;
	}
	protected int getMaxCageSize() {
		return 2;
	}
	protected int[] getCorrectValuePerCell() {
		return new int[] {
				// Row 0
				1, 2, 3, 4,
				// Row 1
				3, 1, 4, 2,
				// Row 2
				2, 4, 1, 3,
				// Row 3
				4, 3, 2, 1,
		};
	}
	protected int[] getCageIdPerCell() {
		return new int[] {
				// Row 0
				0, 1, 1, 2,
				// Row 1
				0, 3, 4, 2,
				// Row 2
				5, 3, 6, 7,
				// Row 3
				5, 8, 6, 7,
		};
	}
	protected int[] getResultPerCage() {
		return new int[] {
				// Cage 0
				3,
				// Cage 1
				6,
				// Cage 2
				2,
				// Cage 3
				4,
				// Cage 4
				4,
				// Cage 5
				2,
				// Cage 6
				3,
				// Cage 7
				2,
				// Cage 8
				3,
		};
	}
	protected CageOperator[] getCageOperatorPerCage() {
		return new CageOperator[] {
				// Cage 0
				CageOperator.DIVIDE,
				// Cage 1
				CageOperator.MULTIPLY,
				// Cage 2
				CageOperator.DIVIDE,
				// Cage 3
				CageOperator.DIVIDE,
				// Cage 4
				CageOperator.NONE,
				// Cage 5
				CageOperator.DIVIDE,
				// Cage 6
				CageOperator.ADD,
				// Cage 7
				CageOperator.SUBTRACT,
				// Cage 8
				CageOperator.NONE,
		};
	}
	@Override
	public String getGridDefinition() {
		return new StringBuilder() //
				// PuzzleComplexity id
				.append("1")
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
						// Cage ids for cells on row 0
				.append("00010102")
						// Cage ids for cells on row 1
				.append("00030402")
						// Cage ids for cells on row 2
				.append("05030607")
						// Cage ids for cells on row 3
				.append("05080607")
						// Definition for cage id 0
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("0,3,4")
						// Definition for cage id 1
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("1,6,3")
						// Definition for cage id 2
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("2,2,4")
						// Definition for cage id 3
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("3,4,4")
						// Definition for cage id 4
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("4,4,0")
						// Definition for cage id 5
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("5,2,4")
						// Definition for cage id 6
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("6,3,1")
						// Definition for cage id 7
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("7,2,2")
						// Definition for cage id 8
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("8,3,0")
				.toString();
	}
}
