package testHelper;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;

public class GridCreator4x4HiddenOperators extends GridCreator4x4 {
	public static GridCreator4x4HiddenOperators create() {
		return new GridCreator4x4HiddenOperators();
	}

	public static GridCreator4x4HiddenOperators createEmpty() {
		GridCreator4x4HiddenOperators gridCreator = new GridCreator4x4HiddenOperators();
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	public static GridCreator4x4HiddenOperators createEmptyWithSelectedCell(
			int idSelectedCell) {
		GridCreator4x4HiddenOperators gridCreator = new GridCreator4x4HiddenOperators();
		gridCreator.setSelectedCell(idSelectedCell);
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	protected GridCreator4x4HiddenOperators() {
		super();
	}

	/**
	 * This code is generated based on a grid which is generated by the app. To generate the code, use the app in Development Mode. Choose menu option Development Options -> Generate code for test helper.
	 *
	 * DO NOT REMOVE THIS TEXT.
	 */
	@Override
	protected long getGameSeed() {
		return -4753005215174217888L;
	}
	protected GridType getGridType() {
		return GridType.GRID_4x4;
	}
	protected boolean getHideOperator() {
		return true;
	}
	protected PuzzleComplexity getPuzzleComplexity() {
		return PuzzleComplexity.DIFFICULT;
	}
	protected int getGeneratorVersionNumber() {
		return 598;
	}
	protected int getMaxCageResult() {
		return 9999;
	}
	protected int getMaxCageSize() {
		return 5;
	}
	protected int[] getCorrectValuePerCell() {
		return new int[] {
				// Row 0
				4, 1, 3, 2,
				// Row 1
				1, 2, 4, 3,
				// Row 2
				2, 3, 1, 4,
				// Row 3
				3, 4, 2, 1,
		};
	}
	protected int[] getCageIdPerCell() {
		return new int[] {
				// Row 0
				1, 2, 0, 0,
				// Row 1
				1, 0, 0, 3,
				// Row 2
				4, 4, 0, 3,
				// Row 3
				5, 5, 3, 3,
		};
	}
	protected int[] getResultPerCage() {
		return new int[] {
				// Cage 0
				12,
				// Cage 1
				3,
				// Cage 2
				1,
				// Cage 3
				10,
				// Cage 4
				5,
				// Cage 5
				1,
		};
	}
	protected CageOperator[] getCageOperatorPerCage() {
		return new CageOperator[] {
				// Cage 0
				CageOperator.ADD,
				// Cage 1
				CageOperator.SUBTRACT,
				// Cage 2
				CageOperator.NONE,
				// Cage 3
				CageOperator.ADD,
				// Cage 4
				CageOperator.ADD,
				// Cage 5
				CageOperator.SUBTRACT,
		};
	}
	@Override
	public String getGridDefinition() {
		return new StringBuilder() //
				// PuzzleComplexity id
				.append("4")
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
						// Cage ids for cells on row 0
				.append("01020000")
						// Cage ids for cells on row 1
				.append("01000003")
						// Cage ids for cells on row 2
				.append("04040003")
						// Cage ids for cells on row 3
				.append("05050303")
						// Definition for cage id 0
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("0,12,0")
						// Definition for cage id 1
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("1,3,0")
						// Definition for cage id 2
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("2,1,0")
						// Definition for cage id 3
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("3,10,0")
						// Definition for cage id 4
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("4,5,0")
						// Definition for cage id 5
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("5,1,0")
				.toString();
	}
}
