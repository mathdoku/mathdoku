package testHelper;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;

public class GridCreator4x4HiddenOperators extends GridCreator4x4 {
	public static GridCreator4x4HiddenOperators create() {
		return new GridCreator4x4HiddenOperators();
	}

	public static GridCreator4x4HiddenOperators createEmpty() {
		GridCreator4x4HiddenOperators gridCreator = new GridCreator4x4HiddenOperators();
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	public static GridCreator4x4HiddenOperators createEmptyWithSelectedCell(
			int idSelectedCell) {
		GridCreator4x4HiddenOperators gridCreator = new GridCreator4x4HiddenOperators();
		gridCreator.setSelectedCell(idSelectedCell);
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	protected GridCreator4x4HiddenOperators() {
		super();
	}

	/**
	 * This code is generated based on a grid which is generated by the app. To
	 * generate the code, use the app in Development Mode. Choose menu option
	 * Development Options -> Generate code for test helper.
	 * 
	 * DO NOT REMOVE THIS TEXT.
	 */
	@Override
	protected long getGameSeed() {
		return -3460409899147014050L;
	}

	protected GridType getGridType() {
		return GridType.GRID_4x4;
	}

	protected boolean getHideOperator() {
		return true;
	}

	protected PuzzleComplexity getPuzzleComplexity() {
		return PuzzleComplexity.DIFFICULT;
	}

	protected int getGeneratorVersionNumber() {
		return 598;
	}

	protected int getMaxCageResult() {
		return 9999;
	}

	protected int getMaxCageSize() {
		return 5;
	}

	protected int[] getCorrectValuePerCell() {
		return new int[] {
				// Row 0
				4, 3, 1, 2,
				// Row 1
				3, 2, 4, 1,
				// Row 2
				1, 4, 2, 3,
				// Row 3
				2, 1, 3, 4, };
	}

	protected int[] getCageIdPerCell() {
		return new int[] {
				// Row 0
				0, 1, 1, 1,
				// Row 1
				0, 0, 0, 1,
				// Row 2
				0, 2, 3, 4,
				// Row 3
				2, 2, 3, 3, };
	}

	protected int[] getResultPerCage() {
		return new int[] {
				// Cage 0
				14,
				// Cage 1
				6,
				// Cage 2
				8,
				// Cage 3
				24,
				// Cage 4
				3, };
	}

	protected CageOperator[] getCageOperatorPerCage() {
		return new CageOperator[] {
				// Cage 0
				CageOperator.ADD,
				// Cage 1
				CageOperator.MULTIPLY,
				// Cage 2
				CageOperator.MULTIPLY,
				// Cage 3
				CageOperator.MULTIPLY,
				// Cage 4
				CageOperator.NONE, };
	}

	@Override
	public String getGridDefinition() {
		return new StringBuilder() //
				// PuzzleComplexity id
				.append("4")
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				// Cage ids for cells on row 0
				.append("00010101")
				// Cage ids for cells on row 1
				.append("00000001")
				// Cage ids for cells on row 2
				.append("00020304")
				// Cage ids for cells on row 3
				.append("02020303")
				// Definition for cage id 0
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("0,14,0")
				// Definition for cage id 1
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("1,6,0")
				// Definition for cage id 2
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("2,8,0")
				// Definition for cage id 3
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("3,24,0")
				// Definition for cage id 4
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("4,3,0")
				.toString();
	}
}
