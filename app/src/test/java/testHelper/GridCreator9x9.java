package testHelper;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;

/**
 * The test grid in this class has been generated with the specified generator
 * version of the app. In case the grid is recreated with the same grid
 * generating parameters as specified by this class, the result should be equal
 * to the grid itself.
 * 
 * All data in the methods below should be kept in sync with the specified
 * version of the generator.
 * 
 * As the data below was generated with hidden operators, this grid can be used
 * with visible and with hidden operator as well.
 */
public class GridCreator9x9 extends GridCreator {
	public static GridCreator9x9 create() {
		return new GridCreator9x9();
	}

	public static GridCreator9x9 createEmpty() {
		GridCreator9x9 gridCreator = new GridCreator9x9();
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	protected GridCreator9x9() {
		super();
	}

	/**
	 * This code is generated based on a grid which is generated by the app. To
	 * generate the code, use the app in Development Mode. Choose menu option
	 * Development Options -> Generate code for test helper.
	 * 
	 * DO NOT REMOVE THIS TEXT.
	 */
	@Override
	protected long getGameSeed() {
		return 6408386309654828268L;
	}

	protected GridType getGridType() {
		return GridType.GRID_9X9;
	}

	protected boolean getHideOperator() {
		return false;
	}

	protected PuzzleComplexity getPuzzleComplexity() {
		return PuzzleComplexity.EASY;
	}

	protected int getGeneratorVersionNumber() {
		return 598;
	}

	protected int getMaxCageResult() {
		return 648;
	}

	protected int getMaxCageSize() {
		return 3;
	}

	protected int[] getCorrectValuePerCell() {
		return new int[] {
				// Row 0
				5, 4, 9, 1, 6, 2, 7, 8, 3,
				// Row 1
				9, 6, 2, 8, 1, 4, 3, 7, 5,
				// Row 2
				1, 9, 7, 5, 8, 3, 6, 4, 2,
				// Row 3
				8, 7, 4, 3, 5, 1, 9, 2, 6,
				// Row 4
				4, 5, 3, 7, 2, 9, 1, 6, 8,
				// Row 5
				3, 2, 6, 9, 7, 8, 5, 1, 4,
				// Row 6
				7, 8, 1, 2, 3, 6, 4, 5, 9,
				// Row 7
				2, 3, 5, 6, 4, 7, 8, 9, 1,
				// Row 8
				6, 1, 8, 4, 9, 5, 2, 3, 7, };
	}

	protected int[] getCageIdPerCell() {
		return new int[] {
				// Row 0
				0, 0, 1, 1, 2, 2, 3, 3, 4,
				// Row 1
				5, 5, 6, 6, 2, 7, 7, 3, 4,
				// Row 2
				8, 5, 9, 10, 10, 11, 12, 12, 13,
				// Row 3
				8, 14, 9, 10, 15, 11, 16, 12, 13,
				// Row 4
				17, 14, 18, 15, 15, 19, 16, 20, 13,
				// Row 5
				17, 21, 18, 22, 23, 19, 24, 20, 25,
				// Row 6
				26, 21, 27, 22, 28, 29, 24, 30, 25,
				// Row 7
				26, 31, 27, 32, 28, 29, 29, 30, 33,
				// Row 8
				31, 31, 34, 32, 32, 35, 35, 36, 33, };
	}

	protected int[] getResultPerCage() {
		return new int[] {
				// Cage 0
				9,
				// Cage 1
				8,
				// Cage 2
				12,
				// Cage 3
				22,
				// Cage 4
				15,
				// Cage 5
				486,
				// Cage 6
				4,
				// Cage 7
				12,
				// Cage 8
				8,
				// Cage 9
				11,
				// Cage 10
				120,
				// Cage 11
				3,
				// Cage 12
				48,
				// Cage 13
				96,
				// Cage 14
				2,
				// Cage 15
				70,
				// Cage 16
				9,
				// Cage 17
				7,
				// Cage 18
				2,
				// Cage 19
				72,
				// Cage 20
				7,
				// Cage 21
				4,
				// Cage 22
				7,
				// Cage 23
				7,
				// Cage 24
				1,
				// Cage 25
				5,
				// Cage 26
				5,
				// Cage 27
				4,
				// Cage 28
				1,
				// Cage 29
				336,
				// Cage 30
				14,
				// Cage 31
				18,
				// Cage 32
				216,
				// Cage 33
				6,
				// Cage 34
				8,
				// Cage 35
				10,
				// Cage 36
				3, };
	}

	protected CageOperator[] getCageOperatorPerCage() {
		return new CageOperator[] {
				// Cage 0
				CageOperator.ADD,
				// Cage 1
				CageOperator.SUBTRACT,
				// Cage 2
				CageOperator.MULTIPLY,
				// Cage 3
				CageOperator.ADD,
				// Cage 4
				CageOperator.MULTIPLY,
				// Cage 5
				CageOperator.MULTIPLY,
				// Cage 6
				CageOperator.DIVIDE,
				// Cage 7
				CageOperator.MULTIPLY,
				// Cage 8
				CageOperator.DIVIDE,
				// Cage 9
				CageOperator.ADD,
				// Cage 10
				CageOperator.MULTIPLY,
				// Cage 11
				CageOperator.DIVIDE,
				// Cage 12
				CageOperator.MULTIPLY,
				// Cage 13
				CageOperator.MULTIPLY,
				// Cage 14
				CageOperator.SUBTRACT,
				// Cage 15
				CageOperator.MULTIPLY,
				// Cage 16
				CageOperator.DIVIDE,
				// Cage 17
				CageOperator.ADD,
				// Cage 18
				CageOperator.DIVIDE,
				// Cage 19
				CageOperator.MULTIPLY,
				// Cage 20
				CageOperator.ADD,
				// Cage 21
				CageOperator.DIVIDE,
				// Cage 22
				CageOperator.SUBTRACT,
				// Cage 23
				CageOperator.NONE,
				// Cage 24
				CageOperator.SUBTRACT,
				// Cage 25
				CageOperator.SUBTRACT,
				// Cage 26
				CageOperator.SUBTRACT,
				// Cage 27
				CageOperator.SUBTRACT,
				// Cage 28
				CageOperator.SUBTRACT,
				// Cage 29
				CageOperator.MULTIPLY,
				// Cage 30
				CageOperator.ADD,
				// Cage 31
				CageOperator.MULTIPLY,
				// Cage 32
				CageOperator.MULTIPLY,
				// Cage 33
				CageOperator.SUBTRACT,
				// Cage 34
				CageOperator.NONE,
				// Cage 35
				CageOperator.MULTIPLY,
				// Cage 36
				CageOperator.NONE, };
	}

	@Override
	public String getGridDefinition() {
		return new StringBuilder() //
				// PuzzleComplexity id
				.append("2")
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				// Cage ids for cells on row 0
				.append("000001010202030304")
				// Cage ids for cells on row 1
				.append("050506060207070304")
				// Cage ids for cells on row 2
				.append("080509101011121213")
				// Cage ids for cells on row 3
				.append("081409101511161213")
				// Cage ids for cells on row 4
				.append("171418151519162013")
				// Cage ids for cells on row 5
				.append("172118222319242025")
				// Cage ids for cells on row 6
				.append("262127222829243025")
				// Cage ids for cells on row 7
				.append("263127322829293033")
				// Cage ids for cells on row 8
				.append("313134323235353633")
				// Definition for cage id 0
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("0,9,1")
				// Definition for cage id 1
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("1,8,2")
				// Definition for cage id 2
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("2,12,3")
				// Definition for cage id 3
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("3,22,1")
				// Definition for cage id 4
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("4,15,3")
				// Definition for cage id 5
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("5,486,3")
				// Definition for cage id 6
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("6,4,4")
				// Definition for cage id 7
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("7,12,3")
				// Definition for cage id 8
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("8,8,4")
				// Definition for cage id 9
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("9,11,1")
				// Definition for cage id 10
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("10,120,3")
				// Definition for cage id 11
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("11,3,4")
				// Definition for cage id 12
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("12,48,3")
				// Definition for cage id 13
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("13,96,3")
				// Definition for cage id 14
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("14,2,2")
				// Definition for cage id 15
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("15,70,3")
				// Definition for cage id 16
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("16,9,4")
				// Definition for cage id 17
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("17,7,1")
				// Definition for cage id 18
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("18,2,4")
				// Definition for cage id 19
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("19,72,3")
				// Definition for cage id 20
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("20,7,1")
				// Definition for cage id 21
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("21,4,4")
				// Definition for cage id 22
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("22,7,2")
				// Definition for cage id 23
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("23,7,0")
				// Definition for cage id 24
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("24,1,2")
				// Definition for cage id 25
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("25,5,2")
				// Definition for cage id 26
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("26,5,2")
				// Definition for cage id 27
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("27,4,2")
				// Definition for cage id 28
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("28,1,2")
				// Definition for cage id 29
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("29,336,3")
				// Definition for cage id 30
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("30,14,1")
				// Definition for cage id 31
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("31,18,3")
				// Definition for cage id 32
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("32,216,3")
				// Definition for cage id 33
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("33,6,2")
				// Definition for cage id 34
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("34,8,0")
				// Definition for cage id 35
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("35,10,3")
				// Definition for cage id 36
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("36,3,0")
				.toString();
	}
}
