package testHelper;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;

/**
 * The test grid in this class has been generated with the specified generator
 * version of the app. In case the grid is recreated with the same grid
 * generating parameters as specified by this class, the result should be equal
 * to the grid itself.
 * 
 * All data in the methods below should be kept in sync with the specified
 * version of the generator.
 * 
 * As the data below was generated with hidden operators, this grid can be used
 * with visible and with hidden operator as well.
 */
public class GridCreator9x9 extends GridCreator {
	public static GridCreator9x9 create() {
		return new GridCreator9x9();
	}

	public static GridCreator9x9 createEmpty() {
		GridCreator9x9 gridCreator = new GridCreator9x9();
		gridCreator.setEmptyGrid();
		return gridCreator;
	}

	protected GridCreator9x9() {
		super();
	}

	/**
	 * This code is generated based on a grid which is generated by the app. To
	 * generate the code, use the app in Development Mode. Choose menu option
	 * Development Options -> Generate code for test helper.
	 * 
	 * DO NOT REMOVE THIS TEXT.
	 */
	@Override
	protected long getGameSeed() {
		return -1837503720999519711L;
	}

	protected GridType getGridType() {
		return GridType.GRID_9X9;
	}

	protected boolean getHideOperator() {
		return false;
	}

	protected PuzzleComplexity getPuzzleComplexity() {
		return PuzzleComplexity.EASY;
	}

	protected int getGeneratorVersionNumber() {
		return 598;
	}

	protected int getMaxCageResult() {
		return 648;
	}

	protected int getMaxCageSize() {
		return 3;
	}

	protected int[] getCorrectValuePerCell() {
		return new int[] {
				// Row 0
				9, 7, 2, 5, 8, 6, 1, 3, 4,
				// Row 1
				1, 3, 4, 9, 6, 2, 7, 5, 8,
				// Row 2
				7, 4, 9, 1, 3, 5, 2, 8, 6,
				// Row 3
				5, 6, 3, 2, 4, 1, 8, 7, 9,
				// Row 4
				3, 2, 1, 8, 9, 4, 5, 6, 7,
				// Row 5
				2, 9, 7, 6, 5, 8, 4, 1, 3,
				// Row 6
				8, 1, 6, 4, 7, 9, 3, 2, 5,
				// Row 7
				4, 5, 8, 7, 1, 3, 6, 9, 2,
				// Row 8
				6, 8, 5, 3, 2, 7, 9, 4, 1, };
	}

	protected int[] getCageIdPerCell() {
		return new int[] {
				// Row 0
				0, 1, 1, 2, 2, 3, 4, 5, 6,
				// Row 1
				0, 7, 8, 8, 9, 3, 4, 5, 5,
				// Row 2
				10, 7, 7, 11, 9, 9, 12, 13, 14,
				// Row 3
				10, 10, 11, 11, 15, 15, 12, 13, 13,
				// Row 4
				16, 16, 17, 18, 18, 18, 19, 20, 21,
				// Row 5
				22, 22, 17, 17, 23, 23, 19, 20, 21,
				// Row 6
				24, 24, 25, 26, 23, 27, 19, 28, 28,
				// Row 7
				29, 29, 25, 26, 30, 27, 31, 32, 32,
				// Row 8
				33, 33, 34, 34, 30, 31, 31, 35, 35, };
	}

	protected int[] getResultPerCage() {
		return new int[] {
				// Cage 0
				8,
				// Cage 1
				5,
				// Cage 2
				3,
				// Cage 3
				3,
				// Cage 4
				7,
				// Cage 5
				120,
				// Cage 6
				4,
				// Cage 7
				108,
				// Cage 8
				13,
				// Cage 9
				90,
				// Cage 10
				210,
				// Cage 11
				6,
				// Cage 12
				6,
				// Cage 13
				24,
				// Cage 14
				6,
				// Cage 15
				5,
				// Cage 16
				1,
				// Cage 17
				42,
				// Cage 18
				21,
				// Cage 19
				60,
				// Cage 20
				6,
				// Cage 21
				10,
				// Cage 22
				7,
				// Cage 23
				280,
				// Cage 24
				8,
				// Cage 25
				48,
				// Cage 26
				3,
				// Cage 27
				27,
				// Cage 28
				10,
				// Cage 29
				20,
				// Cage 30
				1,
				// Cage 31
				378,
				// Cage 32
				7,
				// Cage 33
				48,
				// Cage 34
				2,
				// Cage 35
				4, };
	}

	protected CageOperator[] getCageOperatorPerCage() {
		return new CageOperator[] {
				// Cage 0
				CageOperator.SUBTRACT,
				// Cage 1
				CageOperator.SUBTRACT,
				// Cage 2
				CageOperator.SUBTRACT,
				// Cage 3
				CageOperator.DIVIDE,
				// Cage 4
				CageOperator.MULTIPLY,
				// Cage 5
				CageOperator.MULTIPLY,
				// Cage 6
				CageOperator.NONE,
				// Cage 7
				CageOperator.MULTIPLY,
				// Cage 8
				CageOperator.ADD,
				// Cage 9
				CageOperator.MULTIPLY,
				// Cage 10
				CageOperator.MULTIPLY,
				// Cage 11
				CageOperator.ADD,
				// Cage 12
				CageOperator.SUBTRACT,
				// Cage 13
				CageOperator.ADD,
				// Cage 14
				CageOperator.NONE,
				// Cage 15
				CageOperator.ADD,
				// Cage 16
				CageOperator.SUBTRACT,
				// Cage 17
				CageOperator.MULTIPLY,
				// Cage 18
				CageOperator.ADD,
				// Cage 19
				CageOperator.MULTIPLY,
				// Cage 20
				CageOperator.MULTIPLY,
				// Cage 21
				CageOperator.ADD,
				// Cage 22
				CageOperator.SUBTRACT,
				// Cage 23
				CageOperator.MULTIPLY,
				// Cage 24
				CageOperator.DIVIDE,
				// Cage 25
				CageOperator.MULTIPLY,
				// Cage 26
				CageOperator.SUBTRACT,
				// Cage 27
				CageOperator.MULTIPLY,
				// Cage 28
				CageOperator.MULTIPLY,
				// Cage 29
				CageOperator.MULTIPLY,
				// Cage 30
				CageOperator.SUBTRACT,
				// Cage 31
				CageOperator.MULTIPLY,
				// Cage 32
				CageOperator.SUBTRACT,
				// Cage 33
				CageOperator.MULTIPLY,
				// Cage 34
				CageOperator.SUBTRACT,
				// Cage 35
				CageOperator.DIVIDE, };
	}

	@Override
	public String getGridDefinition() {
		return new StringBuilder() //
				// PuzzleComplexity id
				.append("2")
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				// Cage ids for cells on row 0
				.append("000101020203040506")
				// Cage ids for cells on row 1
				.append("000708080903040505")
				// Cage ids for cells on row 2
				.append("100707110909121314")
				// Cage ids for cells on row 3
				.append("101011111515121313")
				// Cage ids for cells on row 4
				.append("161617181818192021")
				// Cage ids for cells on row 5
				.append("222217172323192021")
				// Cage ids for cells on row 6
				.append("242425262327192828")
				// Cage ids for cells on row 7
				.append("292925263027313232")
				// Cage ids for cells on row 8
				.append("333334343031313535")
				// Definition for cage id 0
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("0,8,2")
				// Definition for cage id 1
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("1,5,2")
				// Definition for cage id 2
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("2,3,2")
				// Definition for cage id 3
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("3,3,4")
				// Definition for cage id 4
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("4,7,3")
				// Definition for cage id 5
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("5,120,3")
				// Definition for cage id 6
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("6,4,0")
				// Definition for cage id 7
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("7,108,3")
				// Definition for cage id 8
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("8,13,1")
				// Definition for cage id 9
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("9,90,3")
				// Definition for cage id 10
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("10,210,3")
				// Definition for cage id 11
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("11,6,1")
				// Definition for cage id 12
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("12,6,2")
				// Definition for cage id 13
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("13,24,1")
				// Definition for cage id 14
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("14,6,0")
				// Definition for cage id 15
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("15,5,1")
				// Definition for cage id 16
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("16,1,2")
				// Definition for cage id 17
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("17,42,3")
				// Definition for cage id 18
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("18,21,1")
				// Definition for cage id 19
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("19,60,3")
				// Definition for cage id 20
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("20,6,3")
				// Definition for cage id 21
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("21,10,1")
				// Definition for cage id 22
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("22,7,2")
				// Definition for cage id 23
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("23,280,3")
				// Definition for cage id 24
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("24,8,4")
				// Definition for cage id 25
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("25,48,3")
				// Definition for cage id 26
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("26,3,2")
				// Definition for cage id 27
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("27,27,3")
				// Definition for cage id 28
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("28,10,3")
				// Definition for cage id 29
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("29,20,3")
				// Definition for cage id 30
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("30,1,2")
				// Definition for cage id 31
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("31,378,3")
				// Definition for cage id 32
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("32,7,2")
				// Definition for cage id 33
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("33,48,3")
				// Definition for cage id 34
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("34,2,2")
				// Definition for cage id 35
				.append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
				.append("35,4,4")
				.toString();
	}
}
