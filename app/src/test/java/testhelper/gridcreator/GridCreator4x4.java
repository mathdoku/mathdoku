package testhelper.gridcreator;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.enums.GridType;
import net.mathdoku.plus.enums.PuzzleComplexity;
import net.mathdoku.plus.puzzle.grid.Grid;

/**
 * The test grid in this class has been generated with the specified generator version of the app. In case the grid is
 * recreated with the same grid generating parameters as specified by this class, the result should be equal to the grid
 * itself.
 * <p/>
 * All data in the methods below should be kept in sync with the specified version of the generator.
 * <p/>
 * As the data below was generated with hidden operators, this grid can be used with visible and with hidden operator as
 * well.
 */
public class GridCreator4x4 extends GridCreator {

    public static GridCreator4x4 create() {
        return new GridCreator4x4();
    }

    public static GridCreator4x4 createEmpty() {
        GridCreator4x4 gridCreator = new GridCreator4x4();
        gridCreator.setEmptyGrid();
        return gridCreator;
    }

    public static Grid createEmptyGrid() {
        return createEmpty().getGrid();
    }

    protected GridCreator4x4() {
        super();
    }

    /**
     * This code is generated based on a grid which is generated by the app. To generate the code, use the app in
     * Development Mode. Choose menu option Development Options -> Generate code for test helper.
     * <p/>
     * DO NOT REMOVE THIS TEXT.
     */
    @Override
    protected long getGameSeed() {
        return -4166542719084570903L;
    }

    protected GridType getGridType() {
        return GridType.GRID_4X4;
    }

    protected boolean getHideOperator() {
        return false;
    }

    protected PuzzleComplexity getPuzzleComplexity() {
        return PuzzleComplexity.NORMAL;
    }

    protected int getGeneratorVersionNumber() {
        return 598;
    }

    protected int getMaxCageResult() {
        return 2500;
    }

    protected int getMaxCageSize() {
        return 4;
    }

    protected int[] getCorrectValuePerCell() {
        return new int[]{
                // Row 0
                4, 1, 2, 3,
                // Row 1
                3, 4, 1, 2,
                // Row 2
                1, 2, 3, 4,
                // Row 3
                2, 3, 4, 1,};
    }

    protected int[] getCageIdPerCell() {
        return new int[]{
                // Row 0
                0, 0, 1, 1,
                // Row 1
                0, 0, 2, 3,
                // Row 2
                4, 4, 2, 3,
                // Row 3
                4, 5, 2, 6,};
    }

    protected int[] getResultPerCage() {
        return new int[]{
                // Cage 0
                48,
                // Cage 1
                6,
                // Cage 2
                8,
                // Cage 3
                6,
                // Cage 4
                5,
                // Cage 5
                3,
                // Cage 6
                1,};
    }

    protected CageOperator[] getCageOperatorPerCage() {
        return new CageOperator[]{
                // Cage 0
                CageOperator.MULTIPLY,
                // Cage 1
                CageOperator.MULTIPLY,
                // Cage 2
                CageOperator.ADD,
                // Cage 3
                CageOperator.ADD,
                // Cage 4
                CageOperator.ADD,
                // Cage 5
                CageOperator.NONE,
                // Cage 6
                CageOperator.NONE,};
    }

    @Override
    public String getGridDefinition() {
        return new StringBuilder() //
                // PuzzleComplexity id
                .append("3").append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
                        // Cage ids for cells on row 0
                .append("00000101")
                        // Cage ids for cells on row 1
                .append("00000203")
                        // Cage ids for cells on row 2
                .append("04040203")
                        // Cage ids for cells on row 3
                .append("04050206")
                        // Definition for cage id 0
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("0,48,3")
                        // Definition for cage id 1
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("1,6,3")
                        // Definition for cage id 2
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("2,8,1")
                        // Definition for cage id 3
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("3,6,1")
                        // Definition for cage id 4
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("4,5,1")
                        // Definition for cage id 5
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART).append("5,3,0")
                        // Definition for cage id 6
                .append(FIELD_SEPARATOR_GRID_DEFINITION_PART)
                .append("6,1,0")
                .toString();
    }
}
