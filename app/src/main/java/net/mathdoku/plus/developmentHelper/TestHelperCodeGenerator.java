package net.mathdoku.plus.developmenthelper;

import android.util.Log;

import net.mathdoku.plus.enums.CageOperator;
import net.mathdoku.plus.gridgenerating.GridGeneratingParameters;
import net.mathdoku.plus.puzzle.cage.Cage;
import net.mathdoku.plus.puzzle.grid.Grid;

/**
 * Write a skeleton for a TestHelper class to the log messages.
 */
public class TestHelperCodeGenerator {
	@SuppressWarnings("unused")
	private static final String TAG = TestHelperCodeGenerator.class.getName();

	private StringBuilder stringBuilder;
	private Grid grid;
	private GridGeneratingParameters gridGeneratingParameters;

	public TestHelperCodeGenerator(Grid grid) {
		this.grid = grid;
		gridGeneratingParameters = grid.getGridGeneratingParameters();
	}

	private void appendHeader() {
		stringBuilder.append("\n");
		stringBuilder.append("/**\n");
		stringBuilder.append(" * This code is generated based on a grid which is generated by the app. To generate the code, use the app in Development Mode. Choose menu option Development Options -> Generate code for test helper.\n");
		stringBuilder.append(" *\n");
		stringBuilder.append(" * DO NOT REMOVE THIS TEXT.\n");
		stringBuilder.append(" */\n");
	}

	private void appendGetGameSeed() {
		stringBuilder.append("@Override\n");
		stringBuilder.append("protected long getGameSeed() {\n");
		stringBuilder.append(String.format("return %dL;\n",
				gridGeneratingParameters.getGameSeed()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetGridType() {
		stringBuilder.append("protected GridType getGridType() {\n");
		stringBuilder.append(String.format("return GridType.%s;\n",
				gridGeneratingParameters.getGridType().toString()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetHideOperator() {
		stringBuilder.append("protected boolean getHideOperator() {\n");
		stringBuilder.append(String.format("return %s;\n",
										   (gridGeneratingParameters.isHideOperators() ? "true" : "false")));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendPuzzleComplexity() {
		stringBuilder
				.append("protected PuzzleComplexity getPuzzleComplexity() {\n");
		stringBuilder.append(String.format("return PuzzleComplexity.%s;\n",
				gridGeneratingParameters.getPuzzleComplexity().toString()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGeneratorVersionNumber() {
		stringBuilder.append("protected int getGeneratorVersionNumber() {\n");
		stringBuilder.append(String.format("return %d;\n",
				gridGeneratingParameters.getGeneratorVersionNumber()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetMaxCageResult() {
		stringBuilder.append("protected int getMaxCageResult() {\n");
		stringBuilder.append(String.format("return %d;\n",
				gridGeneratingParameters.getMaxCageResult()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetMaxCageSize() {
		stringBuilder.append("protected int getMaxCageSize() {\n");
		stringBuilder.append(String.format("return %d;\n",
				gridGeneratingParameters.getMaxCageSize()));
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetCorrectValuePerCell() {
		stringBuilder.append("protected int[] getCorrectValuePerCell() {\n");
		stringBuilder.append("return new int[] {\n");
		for (int row = 0; row < grid.getGridSize(); row++) {
			stringBuilder.append(String.format("// Row %d\n", row));
			for (int col = 0; col < grid.getGridSize(); col++) {
				stringBuilder.append(String.format("%d, ",
						grid.getCellAt(row, col).getCorrectValue()));
			}
			stringBuilder.append("\n");
		}
		stringBuilder.append("};\n");
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetCageIdPerCell() {
		stringBuilder.append("protected int[] getCageIdPerCell() {\n");
		stringBuilder.append("return new int[] {\n");
		for (int row = 0; row < grid.getGridSize(); row++) {
			stringBuilder.append(String.format("// Row %d\n", row));
			for (int col = 0; col < grid.getGridSize(); col++) {
				stringBuilder.append(String.format("%d, ",
						grid.getCellAt(row, col).getCageId()));
			}
			stringBuilder.append("\n");
		}
		stringBuilder.append("};\n");
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetResultPerCage() {
		stringBuilder.append("protected int[] getResultPerCage() {\n");
		stringBuilder.append("return new int[] {\n");
		for (Cage cage : grid.getCages()) {
			stringBuilder.append(String.format("// Cage %d\n", cage.getId()));
			stringBuilder.append(String.format("%d,\n", cage.getResult()));
		}
		stringBuilder.append("};\n");
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetCageOperatorPerCage() {
		stringBuilder
				.append("protected CageOperator[] getCageOperatorPerCage() {\n");
		stringBuilder.append("return new CageOperator[] {\n");
		for (Cage cage : grid.getCages()) {
			stringBuilder.append(String.format("// Cage %d\n", cage.getId()));
			stringBuilder.append(String.format("CageOperator.%s,\n", cage
					.getOperator()
					.toString()));
		}
		stringBuilder.append("};\n");
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private void appendGetGridDefinition() {
		stringBuilder.append("@Override\n");
		stringBuilder.append("public String getGridDefinition() {\n");
		stringBuilder.append("return new StringBuilder() //\n");

		stringBuilder.append("// PuzzleComplexity id\n");
		stringBuilder.append(String.format(".append(\"%d\")\n",
				gridGeneratingParameters.getPuzzleComplexity().getId()));
		stringBuilder.append(".append(FIELD_SEPARATOR_GRID_DEFINITION_PART)\n");

		for (int row = 0; row < grid.getGridSize(); row++) {
			stringBuilder.append(String.format(
					"// Cage ids for cells on row %d\n", row));
			stringBuilder.append(".append(\"");
			for (int col = 0; col < grid.getGridSize(); col++) {
				stringBuilder.append(String.format("%02d",
						grid.getCellAt(row, col).getCageId()));
			}
			stringBuilder.append("\")\n");
		}

		for (Cage cage : grid.getCages()) {
			stringBuilder.append(String.format(
					"// Definition for cage id %d\n", cage.getId()));
			stringBuilder
					.append(".append(FIELD_SEPARATOR_GRID_DEFINITION_PART)\n");
			stringBuilder.append(String.format(".append(\"%d,%d,%d\")\n", cage
					.getId(), cage.getResult(), getCageOperator(cage).getId()));
		}
		stringBuilder.append(".toString();\n");
		stringBuilder.append("}\n");
		stringBuilder.append("\n");
	}

	private CageOperator getCageOperator(Cage cage) {
		return gridGeneratingParameters.isHideOperators() ? CageOperator.NONE
				: cage.getOperator();
	}

	public void logCode() {
		generateCode();
		writeCodeToLog();
	}

	private void generateCode() {
		stringBuilder = new StringBuilder();
		appendHeader();
		appendGetGameSeed();
		appendGetGridType();
		appendGetHideOperator();
		appendPuzzleComplexity();
		appendGeneratorVersionNumber();
		appendGetMaxCageResult();
		appendGetMaxCageSize();
		appendGetCorrectValuePerCell();
		appendGetCageIdPerCell();
		appendGetResultPerCage();
		appendGetCageOperatorPerCage();
		appendGetGridDefinition();
	}

	private void writeCodeToLog() {
		StringBuilder logLineStringBuilder = new StringBuilder("");
		for (String line : stringBuilder.toString().split("\n")) {
			if (logLineStringBuilder.length() + line.length() > 3000) {
				Log.i(TAG, logLineStringBuilder.toString());
				logLineStringBuilder.setLength(0);
			}
			logLineStringBuilder.append(line).append("\n");
		}
		Log.i(TAG, logLineStringBuilder.toString());
	}
}
