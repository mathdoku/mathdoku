apply plugin: 'android'

dependencies {
    compile project(':google-play-services_lib')
    compile files('libs/android-support-v4.jar')
    compile files('libs/achartengine-1.1.0.jar')
    compile files('libs/annotations.jar')
}

android {
    compileSdkVersion 17
    buildToolsVersion "18.0.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
	
	applicationVariants.all { variant ->
		variant.mergeResources.doLast {
			println 'Merge templates to source dir for buidling ' + variant.name + ' variant. '
			
			// Copy general (non variant specific) templates, but replace variant specific values
			def configAppMode = 'AppMode.PRODUCTION'
			if (variant.name == 'Debug') {
				configAppMode = 'AppMode.DEVELOPMENT'
			}
			copy {
				from('./src-templates/all') {
					include '**/*'
					filter {
						line -> line.replaceAll(/@CONFIG.APP_MODE@/,configAppMode)
					}
				}
				into '.'
			}
			
			// Copy variant specific templates
			def variantDir = 'release'
			if (variant.name == 'Debug') {
				variantDir = 'debug'
			}
			copy {
				from('./src-templates/' + variantDir) {
					include '**/*'
				}
				into '.'
			}
		}
	}
}